plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id 

repositories {
    mavenCentral() // Add Maven Central for broader dependency resolution
    mavenLocal()
    
    // JEI repositories
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(21)
    // Enable Javadoc generation
    withJavadocJar()
    // Enable sources generation
    withSourcesJar()
}

neoForge {
    version = neo_version

    parchment {
        mappingsVersion = parchment_mappings_version
        minecraftVersion = parchment_minecraft_version
    }

    runs {
        // Configure client run configuration
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
            // Enable debug logging in development environment
            systemProperty 'jeifolders.debug', 'false'
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
    // Create an API configuration for cleaner dependency management
    api
    implementation.extendsFrom(api)
}

dependencies {
     compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    
    // Full JEI implementation - added to localRuntime for development but not included in our mod's dependencies
    implementation("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")
}

// Process templates for mod metadata
def generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
            
            // Add artifact metadata
            pom {
                name = mod_name
                description = mod_description
                url = 'https://www.example.com/jeifolders'
                
                licenses {
                    license {
                        name = mod_license
                    }
                }
                
                developers {
                    developer {
                        id = 'developer'
                        name = mod_authors
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// Configure Java tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.incremental = true
    // Enable more warnings
    options.deprecation = true
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

// IDE configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
